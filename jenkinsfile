pipeline {
    agent any

        stages {
            stage('Clean Previous Containers') {
                steps {
                    sh 'docker-compose down || true'
                }
            }

        stage('Build Application') {
            steps {
                sh 'docker-compose build app'
            }
        }
        stage('Start Application') {
            steps {
                sh 'docker-compose up -d app'
                // Esperar a que la aplicación esté lista usando el nombre del servicio
                sh '''
                    timeout 120s bash -c '
                        while ! docker-compose exec -T app curl -f http://localhost:5050/login; do
                            sleep 5
                            echo "Esperando a que la aplicación esté lista..."
                        done
                    '
                '''
            }
        }

        stage('Run Cypress Tests') {
            steps {
                script {
                sh """
                    # limpiar reportes previos
                    rm -rf mochawesome-report || true
                    mkdir -p mochawesome-report

                    # ejecutar cypress generando un único HTML autocontenido
                    docker-compose run --rm cypress npx cypress run \\
                    --reporter mochawesome \\
                    --reporter-options "reportDir=mochawesome-report,reportFilename=mochawesome,overwrite=true,html=true,json=false,inlineAssets=true"
                """

                // si usas el modo detached + docker cp, adapta; lo importante es que el workspace tenga mochawesome-report/
                }
            }
            }

            stage('Modify HTML Report') {
                steps {
                    script {
                    // crear banner temporal
                    def banner = """<div style="background-color:#4CAF50;color:white;padding:20px;text-align:center;margin-bottom:20px;">
                <h2>✅ Tests Ejecutados Exitosamente</h2>
                <p>Fecha de ejecución: ${new Date().format("yyyy-MM-dd HH:mm:ss")}</p>
                <p>Build: ${env.BUILD_NUMBER}</p>
                </div>"""
                    writeFile file: 'mocha_banner.html', text: banner

                    // elegir el HTML más grande (si quedaron varios) y asegurar nombre fijo
                    sh '''
                        if ls mochawesome-report/mochawesome_*.html > /dev/null 2>&1; then
                        largest=$(ls -S mochawesome-report/mochawesome_*.html | head -n1)
                        echo "Seleccionando $largest como mochawesome.html"
                        cp "$largest" mochawesome-report/mochawesome.html
                        fi

                        # insertar banner sólo en el mochawesome definitivo
                        if [ -f mochawesome-report/mochawesome.html ]; then
                        sed -i '/<body>/r mocha_banner.html' mochawesome-report/mochawesome.html
                        else
                        echo "No se encontró mochawesome-report/mochawesome.html"
                        fi
                    '''
                    }
                }
            }

        stage('Cleanup') {
            steps {
                sh 'docker-compose down'
            }
        }
    }

    post {
        always {
            publishHTML target: [
                allowMissing: true,
                alwaysLinkToLastBuild: true,
                keepAll: true,
                reportDir: 'mochawesome-report',
                reportFiles: 'mochawesome.html',
                reportName: 'Cypress Test Report'
            ]
        }
    }
}